
<blocks> ::= <block>,<blocks> 
| <block>

<block> ::= 
| <declaration>
| <assignment> 
| <output> 
| <input> 
| <condition> 
| <loop>

<declaration> :: = <datatype> ' ' <varName> '=' <expression> ';'
| <datatype> ' ' <varName> ';'

<assignment> ::= <varName> '=' <expression> ';'



<output> ::= 'print' '(' <expression> ')' ';' 
| 'print' '(' <varName> ')' ';'

print("string");

<input> ::= 'get_input' '(' <string-expression> ')' ';'

get_input("Pick a number");







<if-condition> ::= 'if' '(' <bool-expression> ')' '{' <blocks> '}' ';' 
| 'if' '(' <bool-expression> ')' '{' <blocks> '}' '<elseif> ';' 
| 'if' '(' <bool-expression> ')' '{' <blocks> '}' '<elseif> 'else' '{' <blocks> '}' ';'

<elseif> ::= 'elseif' '(' <bool-expression> ')' '{' <blocks> '}' ';'
| 'elseif' '(' <bool-expression> ')' '{' <blocks> '}' <elseif> ';'








<function> ::= 'def' <datatype> <string-expression>'(' <parameters> ')' '{' <blocks> '}' ';'
| def <datatype> <string-expression> '(' ')' '{' <blocks> '}' ';'

def int funktionsNamn(int argument){
	
};

<parameters> ::= <datatype> ' ' <varName>
| <datatype> ' ' <varName> ' ' <parameters>

<argument> ::= <expression> 
| <varName>


<function-call> ::= <string-expression> '(' ')'
| <string-expression> '(' <expression> ')'



def int faktor(int argument)

faktor(argument)




<loop> ::= 'for' '(' <assignment> ';' <condition> ';' <atrim-expression> ')' '{' <blocks> '}' ';'				


<varNames> ::= <varName>,<varNames>
| <varName>


<array> ::= '[' ']' 
| '[' <varName> ']'
| '[' <varName>, <varNames> ']'

| 'for_each' '(' <iterable> ')' '{' <blocks> '}' ';'
| 'while' '(' <condition> ')' '{' <blocks> '}' ';'

 

print()




<varName> ::= /[A-z]+[A-z0-9]+/




<datatype> ::= 'int'
| 'string'
| 'bool'
| 'array'
| 'char'
| 'float'

<expression> ::= <artim-expression> | <string-expresison> | <bool-expression>


#<artim-expression> ::= <term> '+' <artim-expression> ';'
#| <term> ';'
#
#<term> ::= <factor> '*' <term>
#| <factor> '/' <term>
#| <factor> '%' <term>
#| <factor>
#
#<factor> ::= '(' <artim-expression> ')'
#| <const>
#
#<const> ::= <integer>
#
#<integer> ::= /[0-9]+/ 

<string-expression> ::= '"' string '"' ';' 
| ''' string ''' ';'

<bool-expression> ::= 'false' ';' | 'true' ';' 
| <comparison> ';' 

<comparison> ::= integer '==' integer ';' 
| <integer> '!=' <integer> ';' 
| <integer> '<=' <integer> ';' 
| <integer> '>=' <integer> ';' 
| <integer> '<' <integer> ';' 
| <integer> '>' <integer> ';' 







<comments> ::= '#' /.+/
| '//*' /[.\n]+/ '//'

